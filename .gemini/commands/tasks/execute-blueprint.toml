[metadata]
argument-hint = "{{plan_id}}"
description = "Execute the task in the plan"

[prompt]
content = """# Task Execution\n\n## Assistant Configuration\n\nBefore proceeding with this command, you MUST load and respect the assistant's configuration:\n\n**Run the following scripts:**\n```bash\nASSISTANT=$(node .ai/task-manager/config/scripts/detect-assistant.cjs)\nnode .ai/task-manager/config/scripts/read-assistant-config.cjs \"$ASSISTANT\"\n```\n\nThe output above contains your global and project-level configuration rules. You MUST keep these rules and guidelines in mind during all subsequent operations in this command.\n\n---\n\nYou are the orchestrator responsible for executing all tasks defined in the execution blueprint of a plan document, so choose an appropriate sub-agent for this role. Your role is to coordinate phase-by-phase execution, manage parallel task processing, and ensure validation gates pass before phase transitions.\n\n## Critical Rules\n\n1. **Never skip validation gates** - Phase progression requires successful validation\n2. **Maintain task isolation** - Parallel tasks must not interfere with each other\n3. **Preserve dependency order** - Never execute a task before its dependencies\n4. **Document everything** - All decisions, issues, and outcomes must be recorded in the \"Execution Summary\", under \"Noteworthy Events\"\n5. **Fail safely** - Better to halt and request help than corrupt the execution state\n\n## Input Requirements\n- A plan document with an execution blueprint section. See /TASK_MANAGER.md fo find the plan with ID {{plan_id}}\n- Task files with frontmatter metadata (id, group, dependencies, status)\n- Validation gates document: `/config/hooks/POST_PHASE.md`\n\n### Input Error Handling\n\nIf the plan does not exist, stop immediately and show an error to the user.\n\n**Note**: If tasks or the execution blueprint section are missing, they will be automatically generated before execution begins (see Task and Blueprint Validation below).\n\n### Task and Blueprint Validation\n\nBefore proceeding with execution, validate that tasks exist and the execution blueprint has been generated. If either is missing, automatically invoke task generation.\n\n**Validation Steps:**\n\n```bash\n# Validate plan exists and check for tasks/blueprint\nVALIDATION=$(node .ai/task-manager/config/scripts/validate-plan-blueprint.cjs {{plan_id}})\n\n# Parse validation results\nPLAN_FILE=$(echo \"$VALIDATION\" | grep -o '\"planFile\": \"[^\"]*\"' | cut -d'\"' -f4)\nPLAN_DIR=$(echo \"$VALIDATION\" | grep -o '\"planDir\": \"[^\"]*\"' | cut -d'\"' -f4)\nTASK_COUNT=$(echo \"$VALIDATION\" | grep -o '\"taskCount\": [0-9]*' | awk '{print {{param2}}}')\nBLUEPRINT_EXISTS=$(echo \"$VALIDATION\" | grep -o '\"blueprintExists\": [a-z]*' | awk '{print {{param2}}}')\n```\n\n4. **Automatic task generation**:\n\nIf either `$TASK_COUNT` is 0 or `$BLUEPRINT_EXISTS` is \"no\":\n   - Display notification to user: \"⚠️ Tasks or execution blueprint not found. Generating tasks automatically...\"\n   - Use the SlashCommand tool to invoke task generation:\n   ```\n   /tasks:generate-tasks {{plan_id}}\n   ```\n   - **NEW STEP**: Immediately after task generation succeeds, set the approval_method_tasks field to auto:\n     ```bash\n     node .ai/task-manager/config/scripts/set-approval-method.cjs \"$PLAN_FILE\" auto tasks\n     ```\n   - This signals that tasks were auto-generated in workflow context and execution should continue without pause.\n   - **CRITICAL**: After setting the field, you MUST immediately proceed with blueprint execution without waiting for user input. The workflow should continue seamlessly.\n   - If generation fails: Halt execution with clear error message:\n     ```\n     ❌ Error: Automatic task generation failed.\n\n     Please run the following command manually to generate tasks:\n     /tasks:generate-tasks {{plan_id}}\n     ```\n\n**After successful validation or generation**, immediately proceed with the execution process below without pausing.\n\n## Execution Process\n\nUse your internal Todo task tool to track the execution of all phases, and the final update of the plan with the summary. Example:\n\n- [ ] Create feature branch from the main branch.\n- [ ] Validate or auto-generate tasks and execution blueprint if missing.\n- [ ] Execute .ai/task-manager/config/hooks/PRE_PHASE.md hook before Phase 1.\n- [ ] Phase 1: Execute 1 task(s) in parallel.\n- [ ] Execute .ai/task-manager/config/hooks/POST_PHASE.md hook after Phase 1.\n- [ ] Execute .ai/task-manager/config/hooks/PRE_PHASE.md hook before Phase 2.\n- [ ] Phase 2: Execute 3 task(s) in parallel.\n- [ ] Execute .ai/task-manager/config/hooks/POST_PHASE.md hook after Phase 2.\n- [ ] Execute .ai/task-manager/config/hooks/PRE_PHASE.md hook before Phase 3.\n- [ ] Phase 3: Execute 1 task(s) in parallel.\n- [ ] Execute .ai/task-manager/config/hooks/POST_PHASE.md hook after Phase 3.\n- [ ] Update the Plan 7 with execution summary using .ai/task-manager/config/hooks/EXECUTION_SUMMARY_TEMPLATE.md.\n- [ ] Archive Plan 7.\n\n### Phase Pre-Execution\n\nRead and execute .ai/task-manager/config/hooks/PRE_PHASE.md\n\n### Phase Execution Workflow\n\n1. **Phase Initialization**\n    - Identify current phase from the execution blueprint\n    - List all tasks scheduled for parallel execution in this phase\n\n2. **Agent Selection and Task Assignment**\nRead and execute .ai/task-manager/config/hooks/PRE_TASK_ASSIGNMENT.md\n\n3. **Parallel Execution**\n    - Deploy all selected agents simultaneously using your internal Task tool\n    - Monitor execution progress for each task\n    - Capture outputs and artifacts from each agent\n    - Update task status in real-time\n\n4. **Phase Completion Verification**\n    - Ensure all tasks in the phase have status: \"completed\"\n    - Collect and review all task outputs\n    - Document any issues or exceptions encountered\n\n### Phase Post-Execution\n\nRead and execute .ai/task-manager/config/hooks/POST_PHASE.md\n\n\n### Phase Transition\n\n  - Update phase status to \"completed\" in the Blueprint section of the plan {{plan_id}} document.\n  - Initialize next phase\n  - Repeat process until all phases are complete\n\n### Error Handling\n\n#### Validation Gate Failures\nRead and execute .ai/task-manager/config/hooks/POST_ERROR_DETECTION.md\n\n### Output Requirements\n\n**Context-Aware Output Behavior:**\n\n**Extract approval method from plan metadata:**\n\nFirst, extract both approval method fields from the plan document:\n\n```bash\n# Extract approval methods from plan metadata\nAPPROVAL_METHODS=$(node .ai/task-manager/config/scripts/get-approval-methods.cjs {{plan_id}})\n\nAPPROVAL_METHOD_PLAN=$(echo \"$APPROVAL_METHODS\" | grep -o '\"approval_method_plan\": \"[^\"]*\"' | cut -d'\"' -f4)\nAPPROVAL_METHOD_TASKS=$(echo \"$APPROVAL_METHODS\" | grep -o '\"approval_method_tasks\": \"[^\"]*\"' | cut -d'\"' -f4)\n\n# Defaults to \"manual\" if fields don't exist\nAPPROVAL_METHOD_PLAN=${APPROVAL_METHOD_PLAN:-manual}\nAPPROVAL_METHOD_TASKS=${APPROVAL_METHOD_TASKS:-manual}\n```\n\nThen adjust output based on the extracted approval methods:\n\n- **If `APPROVAL_METHOD_PLAN=\"auto\"` (automated workflow mode)**:\n  - During task auto-generation phase: Provide minimal progress updates\n  - Do NOT instruct user to review the plan or tasks being generated\n  - Do NOT add any prompts that would pause execution\n\n- **If `APPROVAL_METHOD_TASKS=\"auto\"` (tasks auto-generated in workflow)**:\n  - During task execution phase: Provide minimal progress updates at phase boundaries\n  - Do NOT instruct user to review implementation details\n  - Example output: \"Phase 1/3 completed. Proceeding to Phase 2.\"\n\n- **If `APPROVAL_METHOD_PLAN=\"manual\"` or `APPROVAL_METHOD_TASKS=\"manual\"` (standalone mode)**:\n  - Provide detailed execution summary with phase results\n  - List completed tasks and any noteworthy events\n  - Instruct user to review the execution summary in the plan document\n  - Example output: \"Execution completed. Review summary: `.ai/task-manager/archive/[plan]/plan-[id].md`\"\n\n**Note**: This command respects both approval method fields:\n- `approval_method_plan`: Used during auto-generation to determine if we're in automated workflow\n- `approval_method_tasks`: Used during execution to determine output verbosity\n\n**CRITICAL - Structured Output for Command Coordination:**\n\nAlways end your output with a standardized summary in this exact format:\n\n```\n---\nExecution Summary:\n- Plan ID: [numeric-id]\n- Status: Archived\n- Location: .ai/task-manager/archive/[plan-id]--[plan-name]/\n```\n\nThis structured output enables automated workflow coordination and must be included even when running standalone.\n\n## Optimization Guidelines\n\n- **Maximize parallelism**: Always run all available tasks in a phase simultaneously\n- **Resource awareness**: Balance agent allocation with system capabilities\n- **Early failure detection**: Monitor tasks actively to catch issues quickly\n- **Continuous improvement**: Note patterns for future blueprint optimization\n\n## Post-Execution Processing\n\nUpon successful completion of all phases and validation gates, perform the following additional steps:\n\n- [ ] Execution Summary Generation\n- [ ] Plan Archival\n\n### 1. Execution Summary Generation\n\nAppend an execution summary section to the plan document with the format described in .ai/task-manager/config/templates/[EXECUTION_SUMMARY_TEMPLATE.md\n\n### 2. Plan Archival\n\nAfter successfully appending the execution summary:\n\n**Move completed plan to archive**:\n```bash\nmv .ai/task-manager/plans/[plan-folder] .ai/task-manager/archive/\n```\n\n### Important Notes\n\n- **Only archive on complete success**: Archive operations should only occur when ALL phases are completed and ALL validation gates have passed\n- **Failed executions remain active**: Plans that fail execution or validation should remain in the `plans/` directory for debugging and potential re-execution\n- **Error handling**: If archival fails, log the error but do not fail the overall execution - the implementation work is complete\n- **Preserve structure**: The entire plan folder (including all tasks and subdirectories) should be moved as-is to maintain referential integrity\n"""
